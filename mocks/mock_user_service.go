// Code generated by MockGen. DO NOT EDIT.
// Source: service/user_service.go
//
// Generated by this command:
//
//	mockgen -source=service/user_service.go -destination=mocks/mock_user_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/Ayyasy123/dibimbing-capstone.git/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
	isgomock struct{}
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), id)
}

// GetAllUsers mocks base method.
func (m *MockUserService) GetAllUsers() ([]*entity.UserRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]*entity.UserRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserServiceMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserService)(nil).GetAllUsers))
}

// GetUserByID mocks base method.
func (m *MockUserService) GetUserByID(id int) (*entity.UserRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*entity.UserRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserServiceMockRecorder) GetUserByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserService)(nil).GetUserByID), id)
}

// Login mocks base method.
func (m *MockUserService) Login(req *entity.LoginUserReq) (*entity.UserRes, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", req)
	ret0, _ := ret[0].(*entity.UserRes)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), req)
}

// Register mocks base method.
func (m *MockUserService) Register(req *entity.RegisterUserReq) (*entity.UserRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", req)
	ret0, _ := ret[0].(*entity.UserRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), req)
}

// RegisterAsAdmin mocks base method.
func (m *MockUserService) RegisterAsAdmin(req *entity.RegisterUserReq) (*entity.UserRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAsAdmin", req)
	ret0, _ := ret[0].(*entity.UserRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAsAdmin indicates an expected call of RegisterAsAdmin.
func (mr *MockUserServiceMockRecorder) RegisterAsAdmin(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAsAdmin", reflect.TypeOf((*MockUserService)(nil).RegisterAsAdmin), req)
}

// RegisterAsTechnician mocks base method.
func (m *MockUserService) RegisterAsTechnician(req *entity.RegisterAsTechnicianReq) (*entity.TechnicianRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAsTechnician", req)
	ret0, _ := ret[0].(*entity.TechnicianRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterAsTechnician indicates an expected call of RegisterAsTechnician.
func (mr *MockUserServiceMockRecorder) RegisterAsTechnician(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAsTechnician", reflect.TypeOf((*MockUserService)(nil).RegisterAsTechnician), req)
}

// UpdateTechnician mocks base method.
func (m *MockUserService) UpdateTechnician(req *entity.UpdateTechnicianReq) (*entity.TechnicianRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTechnician", req)
	ret0, _ := ret[0].(*entity.TechnicianRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTechnician indicates an expected call of UpdateTechnician.
func (mr *MockUserServiceMockRecorder) UpdateTechnician(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTechnician", reflect.TypeOf((*MockUserService)(nil).UpdateTechnician), req)
}

// UpdateUser mocks base method.
func (m *MockUserService) UpdateUser(req *entity.UpdateUserReq) (*entity.UserRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", req)
	ret0, _ := ret[0].(*entity.UserRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceMockRecorder) UpdateUser(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), req)
}
